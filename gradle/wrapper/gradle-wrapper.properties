#Thu Oct 03 09:00:02 IST 2024
distributionBase=GRADLE_USER_HOME
distributionUrl=https\://services.gradle.org/distributions/gradle-7.4-bin.zip
distributionPath=wrapper/dists
zipStorePath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME



#class HomeActivity : AppCompatActivity() {
#
#private lateinit var barChart: BarChart
#
#
#private lateinit var barChartViewModel: BarChartViewModel  // Declare the ViewModel
#private lateinit var barChartRepository: BarChartRepository
#
#private lateinit var slSpinner: Spinner
#private lateinit var viewModel: DashboardViewModel  // use this
#private lateinit var switchViewModel: SwitchViewModel  // use this
#
#private lateinit var LowViewModel: LowSwitchViewModel  // use this
#
#
#private lateinit var chngswitchViewmodel: ChangeSwitchViewModel
#
#private lateinit var tvBattery: TextView
#
#private lateinit var toggle_uppdates: TextView
#
#
#private lateinit var high_updates: TextView
#
#
#private lateinit var tvBatteryMode: TextView
#private lateinit var tvUpsInVoltage: TextView
#private lateinit var tvUpsOpVoltage: TextView
#private lateinit var tvLoadPer: TextView
#
#private lateinit var solarLoadCurrent:TextView
#private lateinit var test_solar:TextView
#private lateinit var tvsolarCurrentCapacity: TextView
#private lateinit var tvSolarLoadCurrent: TextView
#private lateinit var btntoogleonoff: ToggleButton
#
#
#
#private lateinit var btntoogleHighLow: Switch
#
#private lateinit var Low_change: ToggleButton
#
#private lateinit var tvInvAlert: TextView
#
#private lateinit var cardView: CardView
#private var isZoomedIn = false
#private var currentSerialNumber: String? = null
#
#@SuppressLint("TimberArgCount", "MissingInflatedId")
#override fun onCreate(savedInstanceState: Bundle?) {
#super.onCreate(savedInstanceState)
#setContentView(R.layout.activity_home)
#
#
#// Initialize views
#slSpinner = findViewById(R.id.slSpinner)
#tvBattery = findViewById(R.id.battry_v)
#tvBatteryMode = findViewById(R.id.battery_mode)
#tvLoadPer = findViewById(R.id.loadper)
#solarLoadCurrent= findViewById(R.id.solar_slc)
#test_solar = findViewById(R.id.test_solar)
#tvUpsInVoltage = findViewById(R.id.input_v)
#tvUpsOpVoltage = findViewById(R.id.output_v)
#tvsolarCurrentCapacity = findViewById(R.id.solar_cc)
#tvSolarLoadCurrent = findViewById(R.id.solar_kwh)
#tvInvAlert = findViewById(R.id.Inv_alerts)
#btntoogleonoff = findViewById(R.id.on_toogle)
#btntoogleHighLow = findViewById(R.id.mode_switch)
#cardView = findViewById(R.id.card_test)
#toggle_uppdates = findViewById(R.id.toggle_uppdates)
#high_updates = findViewById(R.id.high_updates)
#Low_change = findViewById(R.id.Low_change)
#barChart = findViewById(R.id.barChart)
#
#
#
#
#
#
#
#// Retrieve serial number from SharedPreferences
#val sharedPref = getSharedPreferences("UserPrefs", MODE_PRIVATE)
#currentSerialNumber = sharedPref.getString("loggedInUserSerialNumber", null)
#
#if (currentSerialNumber == null) {
#Toast.makeText(this, "Serial number not found", Toast.LENGTH_SHORT).show()
#return
#}
#
#barChartRepository = BarChartRepository(RetrofitInstance.api)
#
#// Step 3: Initialize the ViewModel using ViewModelProvider with the factory
#val barChartViewModelFactory = BarChartViewModelFactory(barChartRepository)
#barChartViewModel =
#ViewModelProvider(this, barChartViewModelFactory).get(BarChartViewModel::class.java)
#
#
#val currentSerialNumber =
#currentSerialNumber  // Replace with your logic to get serial number
#if (currentSerialNumber != null) {
#barChartViewModel.loadBarChartData(currentSerialNumber)
#}
#
#
#
#barChartViewModel.barChartData.observe(this, Observer { barChartData ->
#
#// Update your bar chart with the received data
#updateBarChart(barChartData)
#})
#
#
#
#barChart.setOnChartValueSelectedListener(object : OnChartValueSelectedListener {
#override fun onValueSelected(e: Entry?, h: Highlight?) {
#// Check if a bar entry is clicked
#if (e is BarEntry) {
#// Create an intent to start BarChartBigActivity
#val intent = Intent(this@HomeActivity, BigChartActivity::class.java)
#
#// Optionally, pass the selected bar data
#intent.putExtra("selectedBarValue", e.y)
#
#// Start BarChartBigActivity
#startActivity(intent)
#}
#}
#
#override fun onNothingSelected() {
#// Optional: Handle when no bar is selected
#}
#})
#
#
#
#
#
#
#// Initialize ViewModels
#val repository = DashboardRepository(RetrofitInstance.api)
#val factory = DashboardViewModelFactory(repository)
#viewModel = ViewModelProvider(this, factory).get(DashboardViewModel::class.java)
#
#
#
#val switchRepository = SwitchRepository(RetrofitInstance.api)
#val switchFactory = SwitchViewModelFactory(switchRepository)
#switchViewModel = ViewModelProvider(this, switchFactory).get(SwitchViewModel::class.java)
#
#
#val LowswitchRepository = LowSwitchRepository(RetrofitInstance.api)
#
#val LowswitchFactory = LowSwitchViewModelFactory(LowswitchRepository)
#
#LowViewModel = ViewModelProvider(this, LowswitchFactory).get(LowSwitchViewModel::class.java) // data ayega yaha pr
#
#
#
#
#val ChangeswitchRepository = ChangeSwitchRepository(RetrofitInstance.api)
#val changeswitchFactory = ChangeSwitchViewModelFactory(ChangeswitchRepository)
#chngswitchViewmodel = ViewModelProvider(this, changeswitchFactory).get(ChangeSwitchViewModel::class.java)
#
#
#
#
#
#
#
#// Fetch dashboard data using the retrieved serial number
#val payload = DashboardPayload(deviceslno = currentSerialNumber!!)
#viewModel.fetchDashboardData(payload)
#
#
#//        *********************************** working of buttons ***************************************
#
#// Set ToggleButton click listener to change switch using serial number
#btntoogleonoff.setOnCheckedChangeListener { _, isChecked ->
#val deviceStatus = DeviceStatus(onoff = isChecked, deviceslno = currentSerialNumber!!)
#switchViewModel.sendDeviceStatus(deviceStatus)
#}
#
#
#
#
#
#// In your onCreate() method
#val sharedPrefsbtn = getSharedPreferences("toggle_state_prefs", MODE_PRIVATE)
#val toggleState = sharedPrefsbtn.getBoolean("toggle_state", false) // Default to 'false' (OFF)
#
#Log.d("ToggleStates", "Initial toggle state loaded: $toggleState") // Log initial state
#
#// Set the initial state of the switch and text based on the saved state
#btntoogleHighLow.isChecked = toggleState
#toggle_uppdates.text = if (toggleState) "Ups" else "Normal"
#btntoogleHighLow.text = if (toggleState) "Ups" else "Normal"
#
#// Now, set up the listener for any future changes
#btntoogleHighLow.setOnCheckedChangeListener { _, isChecked ->
#val changedevicestatus = deviceswitch(switchmode = isChecked, deviceslno = currentSerialNumber)
#chngswitchViewmodel.sendDeviceChangeStatus(changedevicestatus)
#
#// Save the state in SharedPreferences
#sharedPrefsbtn.edit().putBoolean("toggle_state", isChecked).apply()
#
#// Log state change
#Log.d("ToggleState", "Toggle state changed: $isChecked")
#
#// Update the text based on the toggle state
#if (isChecked) {
#btntoogleHighLow.text = "Ups"
#toggle_uppdates.text = "Ups"
#Log.d("upsmode", "Switch ups mode for serial: $currentSerialNumber")
#} else {
#btntoogleHighLow.text = "Normal"
#toggle_uppdates.text = "Normal"
#Log.d("normal", "Switch normal mode for serial: $currentSerialNumber")
#}
#}
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#Low_change.setOnCheckedChangeListener { _, isChecked ->
#// Create the device switch status with the current serial number and switch mode (ON/OFF)
#val changedevicestatus = Lowswitch(charging = isChecked, deviceslno = currentSerialNumber)
#
#// Send the status change request to the ViewModel
#LowViewModel.sendDeviceLowStatus(changedevicestatus)
#
#// Update the text based on the toggle state
#if (isChecked) {
#// If the button is toggled ON
#Low_change.text = "High"  // Set the text to "Ups" when ON
#high_updates.text = "High"
#Log.d("HighToggleButton", "Switch high mode  for serial: $currentSerialNumber")
#} else {
#// If the button is toggled OFF
#Low_change.text = "Low"  // Set the text to "INV" when OFF
#high_updates.text = "Low"
#Log.d("HighToggleButton", "Switch Low mode turned OFF for serial: $currentSerialNumber")
#}
#}
#
#
#// Observe dashboard data and update cards
#viewModel.dashboardData.observe(this, Observer { batteryItems ->
#if (batteryItems != null) {
#updateCards(batteryItems)
#}
#})
#
#
#//        *****************************   change switch functionality  start ******************************
#
#// Observe switch response
#switchViewModel.apiResponse.observe(this, Observer { response ->
#if (response.RESPONSE == "Success") {
#Timber.tag("databutton").d(" on_off Switch changed successfully.")
#} else {
#Timber.tag("HomeActivity").d("Failed to change switch: %s", response.RESPONSE)
#}
#})
#
#chngswitchViewmodel.apiResponse.observe(this, Observer { response -> // owner of life cycle is here
#if (response.RESPONSE == "Success") {
#Timber.tag("databutton").d("ups /normal  Switch changed successfully.")
#} else {
#Timber.tag("HomeActivity").d("Failed to change switch: %s", response.RESPONSE)
#}
#})
#
#LowViewModel.apiResponse.observe(this, Observer { response -> // owner of life cycle is here
#if (response.RESPONSE == "Success") {
#Timber.tag("Lowbutton").d("High_Low Switch changed successfully.")
#} else {
#Timber.tag("HomeActivity").d("Failed to change switch: %s", response.RESPONSE)
#}
#})
#
#}
#
#//        *****************************   change switch functionality  End ******************************
#
#//        *****************************   update card  functionality  start ******************************
#
#
#
#
#private fun updateCards(batteryList: List<InverterData>) {
#if (batteryList.isNotEmpty()) {
#// Set battery voltage for the first item
#tvBattery.text = batteryList[0].batteryVolt
#
#// Check if batteryList has enough data to update other fields
#if (batteryList.size >= 18) {
#Log.d("battery_data ","your all dynamic data is here"+batteryList.size)
#
#batteryList.forEachIndexed { index, inverterData ->
#Log.d("saradata", "Index: $index, Inverter Data: $inverterData")
#}
#// Mapping data from batteryList to UI elements
#tvBatteryMode.text = batteryList[0].chargingMode
#tvUpsInVoltage.text = batteryList[0].ipVolt
#tvUpsOpVoltage.text = batteryList[0].opVolt
#tvLoadPer.text = batteryList[0].load
#
#
#
#val solarLoadCurrentString = batteryList[0].inverterDischargingcur ?: "0" // e.g., "6"
#val solarCurrentCapacityString = batteryList[0].solarCurrentCapacity ?: "0" // e.g., "13"
#
#// Update TextViews with the original values
#solarLoadCurrent.text = solarLoadCurrentString
#tvsolarCurrentCapacity.text = solarCurrentCapacityString
#
#// Convert the strings to integers, handling nulls safely
#val solarLoadCurrentValue = solarLoadCurrentString.toIntOrNull() ?: 0 // e.g., 6
#val solarCurrentCapacityValue = solarCurrentCapacityString.toIntOrNull() ?: 0 // e.g., 13
#
#// Perform the subtraction
#val updatedSolarCapacityValue = solarCurrentCapacityValue - solarLoadCurrentValue // e.g., 13 - 6
#
#// Set the result to the test_solar TextView
#test_solar.text = updatedSolarCapacityValue.toString() // This should be "7"
#
#// Logging for debugging
#Log.d("Debug", "Solar Load Current: $solarLoadCurrentValue") // Should log 6
#Log.d("Debug", "Solar Current Capacity: $solarCurrentCapacityValue") // Should log 13
#Log.d("Debug", "Updated Solar Capacity: $updatedSolarCapacityValue") // Should log 7
#
#
#tvSolarLoadCurrent.text = batteryList[0].solarKWH
#tvInvAlert.text = batteryList[0].alerts
#
#// Toggle switches based on the onOff and chargingMode fields
#btntoogleonoff.isChecked = batteryList[0].onOff == "true"
#btntoogleHighLow.isChecked = batteryList[0].chargingMode == "true"
#Low_change.isChecked = batteryList[0].mode == "true"
#
#// Example: Create dummy solarKWH values for each day (for testing)
#val solarKwhData = listOf(
#batteryList[0].solarKWH?.let { BarChartData("Sun", it.toDouble()) },  // Sunday solar KWH data
#BarChartData("Mon", 70.0),
#BarChartData("Tue", 110.0),
#BarChartData("Wed", 130.0),
#BarChartData("Thurs", 140.0),
#BarChartData("Fri", 55.0),
#BarChartData("Sat", 10.0)
#)
#
#// Update bar chart
#updateBarChart(solarKwhData as List<BarChartData>)
#}
#}
#}
#
#//        *****************************   update card  functionality  start   end ******************************
#
#//        *****************************   update card  functionality  start ******************************
#
#
#private fun updateBarChart(data: List<BarChartData>) {
#val entries = mutableListOf<BarEntry>()
#val labels = mutableListOf<String>() // To store the days of the week
#
#// Convert BarChartData into BarEntry for the chart
#data.forEachIndexed { index, barChartData ->
#val value = barChartData.value.toFloat()  // Convert value to Float
#entries.add(BarEntry(index.toFloat(), value)) // X-axis will be index, Y-axis will be the value
#labels.add(barChartData.label ?: "") // Store day label (Sunday, Monday, etc.)
#}
#
#// Create the BarDataSet and customize appearance
#val barDataSet = BarDataSet(entries, "Solar KWH Data")
#barDataSet.colors = ColorTemplate.MATERIAL_COLORS.toList() // Optional: Set colors
#barDataSet.valueTextSize = 12f // Optional: Set text size
#
#// Create BarData object
#val barData = BarData(barDataSet)
#
#// Set the data to the chart and refresh it
#barChart.data = barData
#
#// Set custom X-axis labels (days of the week)
#val xAxis = barChart.xAxis
#xAxis.valueFormatter = IndexAxisValueFormatter(labels) // Set labels as days of the week
#xAxis.granularity = 1f // Ensure labels are aligned correctly with bars
#xAxis.position = XAxis.XAxisPosition.BOTTOM // Place labels at the bottom of the chart
#
#// Refresh the chart with new data
#barChart.invalidate() // Refresh the chart with new data
#
#
#}
#
#//        *****************************   update card  functionality  End ******************************
#}
